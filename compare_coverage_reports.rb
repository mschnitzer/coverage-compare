#!/usr/bin/ruby.ruby2.4

require 'trello'
require 'json'

config = {}
unless File.exists?('settings.json')
  File.open('settings.json', 'w+') { |file| file.write('{
  "trello_key": "",
  "trello_token": "",
  "trello_board": ""
}') }

  $stderr.puts "Created settings.json file. Please edit it!"
  exit! 2
end

config = JSON.parse(File.open('settings.json').read)

if ARGV.count < 3
  $stderr.puts "Usage: ./compare_coverage_reports.rb [Commit] [rspec_coverage_file] [minitest_coverage_file]"
  exit! 1
end

Trello.configure do |trello_config|
  trello_config.developer_public_key = config['trello_key']
  trello_config.member_token = config['trello_token']
end

commit = ARGV[0]
rspec_coverage = JSON.parse(File.open(ARGV[1]).read)
rspec_coverage_results = {}
minitest_coverage = JSON.parse(File.open(ARGV[2]).read)

diff_results = {}

rspec_coverage['coverage'].each do |file, lines|
  rspec_coverage_results[file] = {
    covered: lines.select {|l| l && l > 0}.count,
    uncovered: lines.select {|l| !l || l == 0}.count
  }
end

list = Trello::List.create(name: 'Coverage Decreased', board_id: config['trello_board'])

minitest_coverage['coverage'].each do |file, lines|
  minitest_covered = lines.select {|l| l && l > 0}.count
  minitest_uncovered = lines.select {|l| !l || l == 0}.count

  diff_results[file] = {
    rspec_covered: rspec_coverage_results[file][:covered],
    rspec_uncovered: rspec_coverage_results[file][:uncovered],
    rspec_covered_percentage: "%.2f" % (rspec_coverage_results[file][:covered].to_f / lines.count.to_f * 100),
    rspec_uncovered_percentage: "%.2f" % (rspec_coverage_results[file][:uncovered].to_f / lines.count.to_f * 100),
    minitest_covered: lines.select {|l| l && l > 0}.count,
    minitest_uncovered: lines.select {|l| !l || l == 0}.count,
    minitest_covered_percentage: "%.2f" % (minitest_covered.to_f / lines.count.to_f * 100),
    minitest_uncovered_percentage: "%.2f" % (minitest_uncovered.to_f / lines.count.to_f * 100),
  }

  if diff_results[file][:rspec_covered] == diff_results[file][:minitest_covered]
    puts "Skipping file '#{file}' because the coverage is even."
    next
  end

  if diff_results[file][:minitest_covered] == 0
    puts "Skipping file '#{file}' because nothing was covered in minitest test suite."
    next
  end

  description = "## Description
The statistics were generated by using commit `#{commit}`.


**Source (master):** https://github.com/openSUSE/open-build-service/blob/master/src/api/#{file}

**coverage.io report:** https://codecov.io/gh/openSUSE/open-build-service/src/master/src/api/#{file}

_____________

### Statistics: rspec

**Lines covered:** #{diff_results[file][:rspec_covered]} (#{diff_results[file][:rspec_covered_percentage]}%)
**Lines uncovered:** #{diff_results[file][:rspec_uncovered]}


### Statistics: minitest

**Lines covered:** #{diff_results[file][:minitest_covered]} (#{diff_results[file][:minitest_covered_percentage]}%)
**Lines uncovered:** #{diff_results[file][:minitest_uncovered]}

_____________

**Who:** OBS Developer
**Why:** Disable the minitest testsuite
**What:** Increase coverage of rspec test for #{file}

## Acceptance Criteria
  * The coverage of the rspec test for #{file} is the same or higher as the minitest test suite
  * Both tests cover the same scenarios"

  card = Trello::Card.create(name: file, list_id: list.id, desc: description)

  dod = Trello::Checklist.create(name: 'Definition of Done', card_id: card.id)
  dod.add_item('Acceptance Criteria is met')
  dod.add_item('Code is covered by unit tests (model/controller/helper spec)')
  dod.add_item('Test coverage is not decreased')
  dod.add_item('Travis is green (rspec, rubocop)')
  dod.add_item('Pull Request is reviewed and approved by at least one person in the dev team')
  dod.add_item('Pull Request is merged')
  dod.add_item('OBS-Server Package is still building')

  puts "Created card for file: #{file}"

  # in order to give the Trello API a little break
  sleep 1
end
